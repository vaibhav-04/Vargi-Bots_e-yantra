#! /usr/bin/env python

# ROS Node - Ur5 Master

import sys
import copy
import math
import rospkg
import yaml
import time

from Queue import PriorityQueue

import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import actionlib
import threading

from pkg_ros_iot_bridge.msg import msgMqttSub


from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

from pyzbar.pyzbar import decode

from Queue import Queue
from datetime import datetime
from datetime import timedelta

from pkg_ros_iot_bridge.msg import msgGoogleSpreadsheetAction
from pkg_ros_iot_bridge.msg import msgGoogleSpreadsheetGoal
from pkg_ros_iot_bridge.msg import msgGoogleSpreadsheetResult

from pkg_task6.msg import msgOrderDispatchedAction
from pkg_task6.msg import msgOrderDispatchedGoal
from pkg_task6.msg import msgOrderDispatchedResult

from pkg_task6.msg import msgOrderShippedAction
from pkg_task6.msg import msgOrderShippedGoal
from pkg_task6.msg import msgOrderShippedResult

import cv2
import rospy

class GoogleSpreadsheet:
    """This class sends data to action_server_ros_iot_bridge node to push data to google sheet."""

    # Constructor
    def __init__(self):

        self._ac = actionlib.ActionClient('/action_ros_iot_spreadsheet',
                                          msgGoogleSpreadsheetAction)

        # Dictionary to Store all the goal handels
        self._goal_handles = {}

        # Wait for Action Server that will use the action - '/action_ros_iot' to start
        self._ac.wait_for_server()
        self.index = 0
        rospy.loginfo("Action server up, we can send goals.")

    def on_transition(self, goal_handle):
        """This function gets data repeatedly from action server to check goal status.
        :param: goal_handle - goal status and result.
        """

        # from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.

        result = msgGoogleSpreadsheetResult()

        index = 0
        for i in self._goal_handles:
            if self._goal_handles[i] == goal_handle:
                index = i
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(index))
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result)

            if result.flag_success:
                rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))

    def send_goal(self, arg_sheet, arg_data):
        """This function sends goal to action_server_ros_iot_bridge node to push data to google sheet.
        :param: arg_sheet - Sheet ID, arg_data - Sheet data
        :return: goal_handle
        """

        goal = msgGoogleSpreadsheetGoal()
        goal.sheet_id = arg_sheet
        goal.data = arg_data
        goal_handle = self._ac.send_goal(goal, self.on_transition, None)
        self._goal_handles[self.index] = goal_handle
        self.index += 1

        return goal_handle

class Ur5Master:
    """This class manages both Ur5 model and fetches data from 2D camera and sends data to GoogleSpreadsheet class."""

    # Constructor
    def __init__(self):

        self._ac_ur5_1 = actionlib.ActionClient('/action_ur5_1_controller',
                                                msgOrderDispatchedAction)

        self._ac_ur5_2 = actionlib.ActionClient('/action_ur5_2_controller',
                                                msgOrderShippedAction)

        # Dictionary to Store all the goal handels
        self._goal_handles_ur5_1 = {}
        self._goal_handles_ur5_2 = {}

        # Wait for Action Server that will use the action - '/action_ros_iot' to start
        # self._ac_ur5_1.wait_for_server()
        # self._ac_ur5_2.wait_for_server()

        rospy.loginfo("Action servers up, we can send goals.")

        self._package_hp_queue = Queue()
        self._package_mp_queue = Queue()
        self._package_lp_queue = Queue()
        self._priority_order = PriorityQueue()
        self._empty_goal = True

        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/eyrc/vb/camera_1/image_raw", Image, self.camera_callback, queue_size=10)
        self.incoming_order_sub = rospy.Subscriber("/ros_iot_bridge/mqtt/sub", msgMqttSub, self.incoming_order_callback, queue_size=10)
        self.google_sheet = GoogleSpreadsheet()
        self.index_ur5_1 = 0
        self.index_ur5_2 = 0
        self.send_order_thread = threading.Thread(target=self.send_order)
        self.send_order_thread.start()

    def on_transition_ur5_1(self, goal_handle):
        """This function gets data repeatedly from action server of Ur5_1 to check goal status.
        :param: goal_handle - goal status and result.
        """

        # from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.

        result = msgOrderDispatchedResult()

        index = 0
        for i in self._goal_handles_ur5_1:
            if self._goal_handles_ur5_1[i] == goal_handle:
                index = i
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(index))
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result)
            self._empty_goal = True
            if result.flag_success:
                self.dispatched_data(result)
                rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))

    def on_transition_ur5_2(self, goal_handle):
        """This function gets data repeatedly from action server of Ur5_2 to check goal status.
        :param: goal_handle - goal status and result.
        """

        result = msgOrderShippedResult()

        index = 0
        for i in self._goal_handles_ur5_2:
            if self._goal_handles_ur5_2[i] == goal_handle:
                index = i
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(index))
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result)
            if result.flag_success:
                self.shipped_data(result)
                rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))

    def get_qr_data(self, arg_image):
        """This function finds all the package position and color and add it to queue and also sends data to be pushed to google sheet.
        :param: arg_image - Data from 2D camera
        """

        qr_result = decode(arg_image)
        if len(qr_result) == 12:

            today = datetime.today()
            month = today.month
            str_month = ""
            if month < 10:
                str_month = "0"+str(month)
            else:
                str_month = str(month)

            year = today.year%100
            str_year = str(year)
            monyear = str_month+str_year

            List = []
            i = 0
            while i < len(qr_result):
                List1 = []
                List1.append(i)
                List1.append(qr_result[i].rect.left)
                List1.append(qr_result[i].rect.top)
                List1.append(qr_result[i].data)
                i = i + 1
                List.append(List1)
            List.sort(key=lambda List: List[2])
            i = 0
            res = []
            while i < len(List):
                j = 0
                List1 = []
                while(j < 3 and i < len(List)):
                    List1.append(List[i])
                    i = i+1
                    j = j+1
                List1.sort(key=lambda List1: List1[1])
                j = 0
                while j < len(List1):
                    res.append(List1[j])
                    j = j+1
            i = 0
            while i < len(qr_result):
                package = []
                row = i//3
                col = i%3

                if res[i][3] == 'red':
                    package.append('R'+ str(row)+str(col)+monyear)
                    package.append('Medicine')
                    package.append('HP')
                    package.append('R'+str(row)+' C'+str(col))
                    package.append('450')
                    package.append('1')
                    self._package_hp_queue.put([row, col])

                elif res[i][3] == 'yellow':
                    package.append('Y'+ str(row)+str(col)+monyear)
                    package.append('Food')
                    package.append('MP')
                    package.append('R'+str(row)+' C'+str(col))
                    package.append('300')
                    package.append('1')
                    self._package_mp_queue.put([row, col])

                elif res[i][3] == 'green':
                    package.append('G'+ str(row)+str(col)+monyear)
                    package.append('Clothes')
                    package.append('LP')
                    package.append('R'+str(row)+' C'+str(col))
                    package.append('150')
                    package.append('1')
                    self._package_lp_queue.put([row, col])

                self.google_sheet.send_goal('Inventory', package)
                i = i+1

            self.image_sub.unregister()

    def camera_callback(self, data):
        """This is a callback function for 2D camera subscription it repeatedly gets data from 2D camera topic.
        :param: data - Data from 2D camera topic
        """

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            rospy.logerr(e)

        (rows, cols, channels) = cv_image.shape

        image = cv_image
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        ret, thresh1 = cv2.threshold(gray, 50, 200, cv2.THRESH_BINARY)

        rospy.loginfo(self.get_qr_data(thresh1))

        cv2.waitKey(3)

    def incoming_order_callback(self, order_info):
        """This is a callback function for incoming order subscription it repeatedly gets data from mqtt/sub topic.
        :param: order_info - Data from mqtt/sub topic(Contains order information)
        """

        goal_ur5_1 = msgOrderDispatchedGoal()
        if order_info.item == 'Medicine':
            data = self._package_hp_queue.get()
            goal_ur5_1.row = str(data[0])
            goal_ur5_1.col = str(data[1])
            goal_ur5_1.priority = 'HP'
            goal_ur5_1.order_data = order_info
            self._priority_order.put((1, goal_ur5_1))

        elif order_info.item == 'Food':
            data = self._package_mp_queue.get()
            goal_ur5_1.row = str(data[0])
            goal_ur5_1.col = str(data[1])
            goal_ur5_1.priority = 'MP'
            goal_ur5_1.order_data = order_info
            self._priority_order.put((2, goal_ur5_1))

        elif order_info.item == 'Clothes':
            data = self._package_lp_queue.get()
            goal_ur5_1.row = str(data[0])
            goal_ur5_1.col = str(data[1])
            goal_ur5_1.priority = 'LP'
            goal_ur5_1.order_data = order_info
            self._priority_order.put((3, goal_ur5_1))


    def send_order(self):
        """This function sends order details to Ur5_1 and Ur5_2 nodes to pick and place packages."""

        while True:
            if self._priority_order.empty() == False:
                if self._empty_goal == True:
                    self._empty_goal = False
                    goal = self._priority_order.get()[1]
                    goal_handle = self._ac_ur5_1.send_goal(goal, self.on_transition_ur5_1, None)
                    self._goal_handles_ur5_1[self.index_ur5_1] = goal_handle
                    self.index_ur5_1 += 1
                    self.send_goal_ur5_2(goal)

    def send_goal_ur5_2(self, ur5_1_goal):
        """This function send goals to ur5_2 node when goal of ur5_1 is sent.
        :param: ur5_1_goal - Ur5_1 goal details
        """

        priority = ur5_1_goal.priority
        data = ur5_1_goal.order_data
        goal_ur5_2 = msgOrderShippedGoal()
        goal_ur5_2.priority = priority
        goal_ur5_2.order_data = data
        goal_handle = self._ac_ur5_2.send_goal(goal_ur5_2, self.on_transition_ur5_2, None)
        self._goal_handles_ur5_2[self.index_ur5_2] = goal_handle
        self.index_ur5_2 += 1

    def dispatched_data(self, dispatched_info):
        """This function send goal to push dispatched package info on google sheet.
        :param: dispatched_info - Information about dispatched package
        """

        information = []
        information.append(dispatched_info.order_id)
        information.append(dispatched_info.city)
        information.append(dispatched_info.item)
        information.append(dispatched_info.priority)
        information.append(dispatched_info.dispatched_qty)
        information.append(dispatched_info.cost)
        information.append(dispatched_info.dispatched_status)
        information.append(dispatched_info.dispatched_time)
        self.google_sheet.send_goal('OrdersDispatched', information)

    def shipped_data(self, shipped_info):
        """This function send goal to push shipped package info on google sheet.
        :param: shipped_info - Information about shipped package
        """

        information = []
        information.append(shipped_info.order_id)
        information.append(shipped_info.city)
        information.append(shipped_info.item)
        information.append(shipped_info.priority)
        information.append(shipped_info.shipped_qty)
        information.append(shipped_info.cost)
        information.append(shipped_info.shipped_status)
        information.append(shipped_info.shipped_time)
        information.append(str(self.get_estimated_time(shipped_info.shipped_time, shipped_info.priority)))
        self.google_sheet.send_goal('OrdersShipped', information)

    def get_estimated_time(self, time, priority):
        """This function calculates estimated delivery time based on priority of package.
        :param: time, priority"""

        ship_datetime = datetime.strptime(time, '%Y-%m-%d %H:%M:%S')
        ship_date = ship_datetime.date()
        if priority == 'HP':
            estimated_date = ship_date+timedelta(days=1)
        elif priority == 'MP':
            estimated_date = ship_date+timedelta(days=3)
        elif priority == 'LP':
            estimated_date = ship_date+timedelta(days=5)
        return estimated_date

#Main function
def main():

    rospy.init_node('node_ur5_master', anonymous=True)

	#Ur5_Move object
    ur5 = Ur5Master()

    rospy.spin()


if __name__ == '__main__':
    main()
